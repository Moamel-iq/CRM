# Generated by Django 4.2.7 on 2023-11-04 01:57

import account.models
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('sessions', '0001_initial'),
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('email', models.EmailField(max_length=254, unique=True)),
                ('name', models.CharField(max_length=50, verbose_name='Name')),
                ('phone_number', models.CharField(max_length=17, unique=True, validators=[django.core.validators.RegexValidator(message="Phone number must be entered in the format: '+964 7XXXXXXXXX'.", regex='^(?:\\+964|964)?\\s?7\\d{9}$')], verbose_name='Phone number')),
                ('organization_name', models.CharField(max_length=50, verbose_name='Organization Name')),
                ('business', models.CharField(blank=True, help_text='Select your business type:', max_length=50, null=True, verbose_name='Business')),
                ('business_manager_name', models.CharField(blank=True, max_length=50, null=True, verbose_name='Business Manager Name')),
                ('brand_logo', models.ImageField(blank=True, null=True, upload_to='images/brand_logo/', verbose_name='Brand Logo')),
                ('defaultURL', models.URLField(blank=True, null=True)),
                ('otp', models.SmallIntegerField(blank=True, help_text='One Time Password', null=True)),
                ('token', models.CharField(blank=True, editable=False, help_text='Token for authentication', max_length=100, null=True, unique=True, verbose_name='Token')),
                ('ip_address', models.GenericIPAddressField(blank=True, help_text='IP Address', null=True, verbose_name='IP Address')),
                ('is_verified', models.BooleanField(default=False, help_text='Designates whether this user has been verified.Un-verified users cannot log in.', verbose_name='verified')),
                ('is_founder', models.BooleanField(default=False, help_text='Designates whether this user should be treated as founder.', verbose_name='founder')),
                ('is_ceo', models.BooleanField(default=False, help_text='Designates whether this user should be treated as CEO.', verbose_name='ceo')),
                ('is_admin', models.BooleanField(default=False, help_text='Designates whether this user should be treated as admin.', verbose_name='admin')),
                ('is_manager', models.BooleanField(default=False, help_text='Designates whether this user should be treated as manager.', verbose_name='manager')),
                ('is_hr', models.BooleanField(default=False, help_text='Designates whether this user should be treated as Human resources (HR).', verbose_name='hr')),
                ('is_accountant', models.BooleanField(default=False, help_text='Designates whether this user should be treated as accountant.', verbose_name='accountant')),
                ('is_employee', models.BooleanField(default=False, help_text='Designates whether this user should be treated as employee.', verbose_name='employee')),
                ('is_customer', models.BooleanField(default=False, help_text='Designates whether this user should be treated as customer.', verbose_name='customer')),
                ('is_supplier', models.BooleanField(default=False, help_text='Designates whether this user should be treated as supplier.', verbose_name='supplier')),
                ('otp_created_time', models.DateTimeField(default=django.utils.timezone.now, editable=False, verbose_name='OTP created time')),
                ('password_changes_datatime', models.DateTimeField(blank=True, null=True, verbose_name='Password changes datatime')),
                ('last_activity', models.DateTimeField(blank=True, null=True, verbose_name='Last activity')),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('session', models.OneToOneField(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='sessions.session')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name': 'user',
                'verbose_name_plural': 'users',
                'abstract': False,
            },
            managers=[
                ('objects', account.models.UserManager()),
            ],
        ),
    ]

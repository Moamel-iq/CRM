# Generated by Django 4.2.7 on 2023-11-04 01:57

import ckeditor.fields
from decimal import Decimal
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone
import django_countries.fields
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('hr', '0006_bank_signature_picture'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
                ('is_active', models.BooleanField(blank=True, default=True, null=True)),
            ],
        ),
        migrations.CreateModel(
            name='CategoryExpense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('name', models.CharField(max_length=100)),
            ],
            options={
                'verbose_name': 'Category Expense',
                'verbose_name_plural': 'Categories Expense',
            },
        ),
        migrations.CreateModel(
            name='Order',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('order_date', models.DateTimeField(auto_now_add=True)),
                ('status', models.CharField(choices=[('processing', 'Processing'), ('shipped', 'Shipped'), ('delivered', 'Delivered')], default=[('processing', 'Processing')], max_length=100)),
                ('quantity', models.PositiveIntegerField()),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hr.customer')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Product',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('product_name', models.CharField(max_length=100)),
                ('product_code', models.CharField(blank=True, max_length=4, null=True, unique=True)),
                ('product_model', models.CharField(max_length=100)),
                ('product_description', ckeditor.fields.RichTextField()),
                ('price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('in_stock', models.IntegerField(default=0)),
                ('image', models.ImageField(blank=True, null=True, upload_to='images/products/image', verbose_name='Product Images')),
                ('barcode', models.ImageField(blank=True, null=True, upload_to='images/products/barcode', verbose_name='barcode/')),
                ('qrcode', models.ImageField(blank=True, null=True, upload_to='images/products/qrcode', verbose_name='qrcode/')),
                ('quantity', models.IntegerField(default=0)),
                ('out_of_stock', models.BooleanField(default=False)),
                ('mfg_date', models.DateField(blank=True, help_text='The MFG date is the date the product was manufactured, or the Manufacturing Date (MFG). It is not an expiration date.', null=True)),
                ('exp_date', models.DateField(blank=True, help_text='An expiration date is the last day that a consumable product such as food or medicine.', null=True)),
                ('status', models.CharField(choices=[('out of stock', 'Out of Stock'), ('in stock', 'In Stock')], default='In stock', max_length=20)),
                ('hard_disk_size', models.CharField(blank=True, help_text='Example: 256 GB', max_length=100, null=True, verbose_name='Hard Disk Size')),
                ('screen_size', models.CharField(blank=True, help_text='13.3 Inches, 15.6 Inches, etc.', max_length=100, null=True, verbose_name='Screen Size')),
                ('operating_system', models.CharField(blank=True, help_text='Example: Windows, Mac, Linux, etc.', max_length=10, null=True, verbose_name='Operating System')),
                ('cpu_manufacturer', models.CharField(blank=True, help_text='Apple, Intel, AMD, etc.', max_length=30, null=True, verbose_name='CPU Manufacturer')),
                ('connectivity_technology', models.CharField(blank=True, help_text='Bluetooth, Wi-Fi, USB, Ethernet, etc.', max_length=40, null=True, verbose_name='Connectivity Technology')),
                ('uses_for_product', models.CharField(blank=True, help_text='Personal, Gaming, Business, etc.', max_length=50, null=True, verbose_name='Specific Uses For Product')),
                ('brand_name', models.CharField(blank=True, help_text='Example: Apple, Samsung, Sony, LG, etc.', max_length=50, null=True, verbose_name='Brand Name')),
                ('manufacturer', models.CharField(blank=True, help_text='Example: Apple, Samsung, LG, Sony, etc.', max_length=50, null=True, verbose_name='Manufacturer')),
                ('size', models.CharField(blank=True, help_text="The numeric or text version of the item's size. Example: Small, Medium, Large, X-Large, XX-Large, etc.", max_length=10, null=True, verbose_name='Size')),
                ('weight', models.CharField(blank=True, help_text="The numeric or text version of the item's weight. Example: 1.5 lbs, 2.5 lbs, etc.", max_length=10, null=True, verbose_name='Weight')),
                ('height', models.CharField(blank=True, help_text="The numeric or text version of the item's height. Example: 1.5 inches, 2.5 inches, etc.", max_length=10, null=True, verbose_name='Height')),
                ('color', models.CharField(blank=True, help_text='The color of the item. Example: Red, Blue, Green, etc.', max_length=10, null=True, verbose_name='Color')),
                ('shape', models.CharField(blank=True, help_text='The shape of the item. Example: Round, Square, Oval, etc.', max_length=10, null=True, verbose_name='Shape')),
                ('material_type', models.CharField(blank=True, help_text="what material is the product made out of? '\n Example: plastic, metal, wood, etc.", max_length=10, null=True, verbose_name='Material Type')),
                ('count_sold', models.IntegerField(default=0)),
                ('country', django_countries.fields.CountryField(max_length=2)),
                ('recently_sold', models.DateTimeField(blank=True, null=True)),
                ('recently_added', models.DateTimeField(blank=True, null=True)),
                ('recently_viewed', models.DateTimeField(blank=True, null=True)),
                ('recently_updated', models.DateTimeField(blank=True, null=True)),
                ('supplier_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.category')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hr.supplier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Unit',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('status', models.BooleanField(default=True)),
            ],
        ),
        migrations.CreateModel(
            name='Stock',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('purchase_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('in_qnty', models.IntegerField()),
                ('out_qnty', models.IntegerField()),
                ('stock', models.IntegerField()),
                ('sale_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Service',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('service_name', models.CharField(max_length=100)),
                ('grand_total', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('charge', models.DecimalField(decimal_places=2, max_digits=10)),
                ('description', models.TextField(blank=True, null=True)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('customer', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='hr.customer')),
            ],
            options={
                'verbose_name': 'Service',
                'verbose_name_plural': 'Services',
            },
        ),
        migrations.CreateModel(
            name='Sale',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('invoice_number', models.CharField(max_length=10, unique=True)),
                ('date', models.DateField()),
                ('payment_method', models.CharField(choices=[('hand cash', 'Hand Cash'), ('cash on delivery', 'Cash On Delivery'), ('bKash', 'bKash'), ('উপায় (upay)', 'উপায় (upay)'), ('nagad', 'Nagad'), ('dutch-bangla bank', 'Dutch-Bangla Bank'), ('bank payment', 'Bank Payment')], max_length=50)),
                ('status', models.CharField(choices=[('due', 'Due'), ('paid', 'Paid')], max_length=50)),
                ('is_paid', models.BooleanField(default=False, help_text='Is the sale paid? If yes, the status will be set to paid.', verbose_name='Is Paid')),
                ('discount', models.DecimalField(decimal_places=0, default=Decimal('0'), max_digits=2, validators=[django.core.validators.MinValueValidator(0), django.core.validators.MaxValueValidator(100)])),
                ('due', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hr.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product')),
            ],
            options={
                'ordering': ['-date'],
            },
        ),
        migrations.CreateModel(
            name='Return',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('additional_information', models.TextField(blank=True, help_text='e.g. My phone has missing headphones', max_length=500, null=True, verbose_name='Additional Information (optional)')),
                ('return_reason', models.CharField(choices=[('item is defective or not working', 'Item is defective or not working'), ('item or accessory is missing in the', 'Item or accessory is missing in the'), ('item has missing freebie', 'Item has missing freebie'), ('item does not match decription or picture', 'Item does not match decription or picture'), ('i did not order this size', 'I did not order this size'), ('i received the wrong item', 'I received the wrong item'), ('item does not fit me', 'Item does not fit me'), ("don't want to item anymore", "Don't want to item anymore"), ('item is damaged/broken/has dent or scratches', 'Item is damaged/broken/has dent or scratches')], max_length=70)),
                ('is_returned', models.BooleanField(default=False)),
                ('is_returned_by_customer', models.BooleanField(default=False)),
                ('is_returned_by_supplier', models.BooleanField(default=False)),
                ('order', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.order')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Purchase',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('invoice_number', models.CharField(blank=True, max_length=4, null=True, unique=True)),
                ('purchase_id', models.CharField(blank=True, max_length=8, null=True, unique=True)),
                ('purchase_date', models.DateField(default=django.utils.timezone.now, verbose_name='Purchase Date')),
                ('payment_method', models.CharField(choices=[('cash payment', 'Cash Payment'), ('bank payment', 'Bank Payment'), ('online payment', 'Online Payment')], default='cash payment', max_length=20, verbose_name='Payment Type')),
                ('details', models.TextField(blank=True, null=True, verbose_name='Details')),
                ('discount', models.DecimalField(decimal_places=2, default=0.0, max_digits=5)),
                ('paid_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('due_amount', models.DecimalField(decimal_places=2, default=0.0, max_digits=10)),
                ('total_amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='product.product')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='hr.supplier')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.AddField(
            model_name='product',
            name='unit',
            field=models.ForeignKey(on_delete=django.db.models.deletion.DO_NOTHING, to='product.unit'),
        ),
        migrations.AddField(
            model_name='order',
            name='product',
            field=models.ManyToManyField(to='product.product'),
        ),
        migrations.CreateModel(
            name='Expense',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('created_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('updated_at', models.DateTimeField(default=django.utils.timezone.now, editable=False)),
                ('date', models.DateField(auto_now_add=True)),
                ('expense_type', models.CharField(max_length=100)),
                ('amount', models.DecimalField(decimal_places=2, max_digits=10)),
                ('category', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.DO_NOTHING, to='product.categoryexpense')),
            ],
            options={
                'abstract': False,
            },
        ),
        migrations.CreateModel(
            name='Damage',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_customer_notified', models.BooleanField(default=False)),
                ('is_supplier_notified', models.BooleanField(default=False)),
                ('damaged_date', models.DateField()),
                ('damaged_reason', models.CharField(choices=[('broken', 'Broken'), ('missing', 'Missing'), ('expiry dates over', 'Expiry Dates over'), ('empty', 'Empty')], max_length=100)),
                ('note', models.TextField(blank=True, null=True)),
                ('customer', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hr.customer')),
                ('product', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='product.product')),
                ('supplier', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='hr.supplier')),
            ],
        ),
    ]
